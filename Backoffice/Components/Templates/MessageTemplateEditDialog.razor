@using Service.MessageTemplates.Grpc.Models
@using Microsoft.AspNetCore.Components
@inject IToaster ToastService;

<BaseTwoButtonsDialog Caption="@(Request.TemplateId)"
                      OnClose="OnClose"
                      YesButtonCaption="Save"
                      NoButtonCaption="Cancel"
                      OnSubmit="OnSubmit">

            @if (IsCreate)
            {
                <div>
                    <input type="text" class="form-control" placeholder="Brand" @bind="Request.Brand"/>
                </div>
                <div>
                    <input type="text" class="form-control" placeholder="Language" @bind="Request.Lang"/>
                </div>
            }
            <div>
                <textarea type="text" class="form-control" placeholder="Body" @bind="Request.TemplateBody"></textarea>
            </div>
            @if(TemplateParams!=null && TemplateParams.Any())
            {<ul>
                 Template params:
                 @foreach (var param in TemplateParams)
                 {
                     <li>@param</li>
                 }
             </ul>
            }

</BaseTwoButtonsDialog>

@code {

    [Parameter]
    public (string brand, string lang) BodyId { get; set; }
    
    [Parameter]
    public TemplateEditRequest Request { get; set; } = new();

    [Parameter]
    public bool IsCreate { get; set; }

    [Parameter]
    public EventCallback OnCloseCallback { get; set; }

    [Parameter]
    public EventCallback<TemplateEditRequest> OnCreateCallback { get; set; }

    [Parameter]
    public EventCallback<TemplateEditRequest> OnUpdateCallback { get; set; }
    
    [Parameter]
    public List<string> TemplateParams { get; set; }

    private void OnClose()
    {
        OnCloseCallback.InvokeAsync();
    }

    private async Task OnSubmit()
    {
        if (String.IsNullOrWhiteSpace(Request.Brand) || String.IsNullOrWhiteSpace(Request.Lang) || String.IsNullOrWhiteSpace(Request.TemplateBody))
        {
            ToastService.Error($"Brand, Lang and/or Body couldn't be empty");
        }
        else
        {
            await OnUpdateCallback.InvokeAsync(Request);
        }    
    }

}