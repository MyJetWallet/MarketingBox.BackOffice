@using MarketingBox.Backoffice.Abstractions.Models
@using MarketingBox.Backoffice.Services.Boxes
@using MarketingBox.Backoffice.Services.CampaignBoxes

@inject IToaster ToastService;
@inject ICampaignBoxItemManager CampaignBoxItemManager

<tr>
    <th>@Item.CampaignBox.CampaignId</th>
    <th>@Item.CampaignBox.BoxId</th>
    <th>@Item.CampaignBox.CapType</th>
    <th>@Item.CampaignBox.DailyCapValue</th>
    <th>@Item.CampaignBox.EnableTraffic</th>
    <th>@Item.CampaignBox.Priority</th>
    <th>@Item.CampaignBox.Weight</th>
    <th>(@Item.CampaignBox.Country.Code) @Item.CampaignBox.Country.Name</th>

    <td>
        <ul class="nav">
            <li><button type="button" class="btn-outline-info btn" @onclick="ShowDetails">Details</button></li>
            <li><button type="button" class="btn-outline-warning btn" @onclick="ShowEdit">Edit</button></li>
            <li><button type="button" class="btn-outline-danger btn" @onclick="ShowDelete">Delete</button></li>
        </ul>
    </td>
</tr>

@if (IsShowDetails)
{
    <CampaignBoxDetailsDialog BoxItem="@BoxItem" Item="@Item" OnCloseCallback="OnCloseDialog" />
}

@if (IsShowEdit)
{
    <div>
        <CampaignBoxDetailsDialogEdit  BoxItem="@BoxItem" Item="@Item" IsCreate="false" OnCloseCallback="OnCloseEditDialog" OnUpdateCallback="OnUpdate" />
    </div>
}

@if (IsShowDelete)
{
    <div>
        <BaseTwoButtonsDialog
            Caption=@($"Delete brand {Item.CampaignBox.CampaignId} [{Item.CampaignBox.BoxId}]")
            OnClose="OnCloseDeleteDialog"
            YesButtonCaption="Delete"
            NoButtonCaption="Cancel"
            OnSubmit="DeleteItem">
            
            <h3 class="alert-warning">Are you sure you want to delete the brand <b>@Item.CampaignBox.CampaignId [@Item.CampaignBox.BoxId]?</b></h3>
            
        </BaseTwoButtonsDialog>
    </div>
}

@code {

    [Parameter]
    public BoxItem BoxItem { get; set; }

    [Parameter]
    public CampaignBoxItem Item { get; set; }

    [Parameter]
    public ILoaderConfiguration LoaderConfig { get; set; }

    [Parameter]
    public EventCallback<CampaignBoxItem> OnDeleteCallback { get; set; }

    private bool IsShowDetails { get; set; }

    private bool IsShowEdit { get; set; }

    private bool IsShowDelete { get; set; }


    private void OnCloseDialog()
    {
        IsShowDetails = false;
        StateHasChanged();
    }

    private void ShowDetails()
    {
        IsShowDetails = true;
        StateHasChanged();
    }

    private void ShowEdit()
    {
        IsShowEdit = true;
        StateHasChanged();
    }

    private void OnCloseEditDialog()
    {
        IsShowEdit = false;
        StateHasChanged();
    }

    private async void OnUpdate(CampaignBoxItem item)
    {
        try
        {
            await CampaignBoxItemManager.Update(item);

            IsShowEdit = false;

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            ToastService.Error(ex.Message, "Edit Campaign box");
        }
    }


    private void OnCloseDeleteDialog()
    {
        IsShowDelete = false;
        StateHasChanged();
    }


    private async Task DeleteItem()
    {
        IsShowDelete = false;
        await OnDeleteCallback.InvokeAsync(Item);
    }

    private void ShowDelete()
    {
        IsShowDelete = true;
        StateHasChanged();
    }
}
