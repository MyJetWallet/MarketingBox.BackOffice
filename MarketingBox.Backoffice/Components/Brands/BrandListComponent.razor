@using MarketingBox.Backoffice.Abstractions.Models
@using MarketingBox.Backoffice.Services.Brands

@inject IBrandItemManager BrandItemManager
@inject IToaster ToastService

<Loader LoaderConfig="@LoaderConfig" />

<ul class="nav float-left">
    <li><button @onclick="OnRefresh" type="button" class="btn btn-outline-primary" style="margin: 5px; border-radius: 10px">Refresh</button></li>
    <li><button @onclick="OnAdd" type="button" class="btn btn-outline-success" style="margin: 5px; border-radius: 10px">Add</button></li>
</ul>

<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var asset in List)
        {
            <BrandTableRow Item="@asset" LoaderConfig="@LoaderConfig" OnDeleteCallback="Delete" />
        }

    </tbody>
</table>

@if (IsShowAdding)
{
    <div>
        <BrandDetailsDialogEdit IsCreate="true" OnCloseCallback="OnCloseAddingDialog" OnCreateCallback="OnCreate" />
    </div>
}


@code {
    private string Message { get; set; } = "-- none --";

    private ILoaderConfiguration LoaderConfig { get; set; } = new LoaderConfiguration();

    private bool IsShowAdding { get; set; }

    private List<BrandItem> List { get; set; } = new();

    private async void OnRefresh()
    {
        LoaderConfig.Enable();

        List = await BrandItemManager.GetAll();

        LoaderConfig.Disable();
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        OnRefresh();

        base.OnInitialized();
    }

    private async Task OnAdd()
    {
        IsShowAdding = true;
        await InvokeAsync(StateHasChanged);
    }

    private void OnCloseAddingDialog()
    {
        IsShowAdding = false;
        StateHasChanged();
    }

    private async void OnCreate(BrandItem item)
    {
        try
        {
            await BrandItemManager.Create(item);

            ToastService.Info($"Brand {item.Brand.Id} is created", "Create brand");

            IsShowAdding = false;

            OnRefresh();
        }
        catch (Exception ex)
        {
            ToastService.Error(ex.Message, "Partner creation");
        }
    }

    private async void Delete(BrandItem item)
    {
        try
        {
            await BrandItemManager.Delete(item);

            ToastService.Info($"Brand {item.Brand.Id} is deleted", "Delete brand");

            OnRefresh();
        }
        catch (Exception ex)
        {
            ToastService.Error(ex.Message, "Brand deletion");
        }
    }
}